<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nett</name>
    </assembly>
    <members>
        <member name="T:Nett.Toml">
            <summary>
            Main Nett API access.
            </summary>
        </member>
        <member name="F:Nett.Toml.FileExtension">
            <summary>
            The TOML standard file extension '.toml'.
            </summary>
        </member>
        <member name="M:Nett.Toml.Create">
            <summary>
            Creates a empty TOML table.
            </summary>
            <returns>A empty table instance created with the default config.</returns>
            <remarks>[!include[_](../specs/toml-create-remarks.md)]</remarks>
        </member>
        <member name="M:Nett.Toml.Create(Nett.TomlSettings)">
            <summary>
            Creates a empty TOML table.
            </summary>
            <param name="settings">The config to use, to create the table.</param>
            <returns>A new empty table created with the given config.</returns>
            <exception cref="T:System.ArgumentNullException">*config* is **null**.</exception>
            <remarks>[!include[_](../specs/toml-create-remarks.md)]</remarks>
        </member>
        <member name="M:Nett.Toml.Create``1(``0)">
            <summary>
            Creates a new TOML table from a given CLR object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="obj">The CLR object instance for that the TOML table will be created.</param>
            <returns>
            A new TomlTable created with the default config, equivalent to the passed CLR object.
            </returns>
            <exception cref="T:System.ArgumentNullException">*obj* is **null**.</exception>
            <remarks>
            [!include[_](../specs/toml-create-from-remarks.md)]
            [!include[_](../specs/toml-create-remarks.md)]
            </remarks>
        </member>
        <member name="M:Nett.Toml.Create``1(``0,Nett.TomlSettings)">
            <summary>
            Creates a TOML table from a given CLR object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="obj">The CLR object instance for that the TOML table will be created.</param>
            <param name="settings">The config to use for the creation.</param>
            <returns>A new table representing the CLR object. The table is associated with the given config.</returns>
            <remarks>[!include[_](../specs/toml-create-remarks.md)]</remarks>
        </member>
        <member name="M:Nett.Toml.ReadFile``1(System.String)">
            <summary>
            Reads the TOML contents from some file and converts it to a CLR object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="filePath">The absolute or relative path to the file.</param>
            <returns>A CLR object representing the TOML contents of the file.</returns>
            <exception cref="T:System.ArgumentNullException">If *filePath* is **null**.</exception>
            <remarks>Uses the default <see cref="T:Nett.TomlSettings"/></remarks>
        </member>
        <member name="M:Nett.Toml.ReadFile``1(System.String,Nett.TomlSettings)">
            <summary>
            Reads the TOML contents from some file and converts it to a CLR object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="filePath">The absolute or relative path to the file.</param>
            <param name="settings">The settings used to process the TOML content.</param>
            <returns>A CLR object representing the TOML contents of the file.</returns>
            <exception cref="T:System.ArgumentNullException">If *filePath* is **null**.</exception>
            <exception cref="T:System.ArgumentNullException">If *settings* is **null**</exception>
        </member>
        <member name="M:Nett.Toml.ReadFile(System.String)">
            <summary>
            Reads the TOML contents from some file and maps it into a TomlTable structure.
            </summary>
            <param name="filePath">The absolute or relative path to the file.</param>
            <returns>A <see cref="T:Nett.TomlTable"/> corresponding to the file content.</returns>
            <remarks>Uses the default TOML settings while processing the file.</remarks>
        </member>
        <member name="M:Nett.Toml.ReadFile(System.String,Nett.TomlSettings)">
            <summary>
            Reads the TOML contents from some file and maps it into a TomlTable structure.
            </summary>
            <param name="filePath">The absolute or relative path to the file.</param>
            <param name="settings">The settings used to process the TOML content.</param>
            <returns>A <see cref="T:Nett.TomlTable"/>corresponding to the file content.</returns>
        </member>
        <member name="T:Nett.ConversionBuilderExtensions">
            <summary>
            This class provides generic specializations for IConfigureConversionBuilder.
            </summary>
            <remarks>
            These specializations are used, so that the user supplying the conversion
            doesn't need to invoke the TOML object constructor directly which he cannot
            as it is internal.
            </remarks>
        </member>
        <member name="M:Nett.TomlSettings.IPropertyMappingBuilder.UseTargetPropertySelector(Nett.ITargetPropertySelector)">
            <summary>
            Use a custom target property selector implementation for these settings.
            </summary>
            <param name="custom">Custom target selector implementation.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="custom"/> is <b>null</b>.</exception>
            <returns>Fluent configuration builder continuation object.</returns>
        </member>
        <member name="M:Nett.TomlSettings.IPropertyMappingBuilder.UseTargetPropertySelector(System.Func{Nett.TargetPropertySelectors,Nett.ITargetPropertySelector})">
            <summary>
            Choose which standard selector implementation to use for these settings.
            </summary>
            <param name="standardSelectors">Lamba which's parameter allows to choose one of the standard selectors.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="standardSelectors"/> is <b>null</b>.</exception>
            <returns>Fluent configuration builder continuation object.</returns>
        </member>
        <member name="M:Nett.TomlSettings.IPropertyMappingBuilder.UseKeyGenerator(Nett.IKeyGenerator)">
            <summary>
            Use a custom key generator implementation for these settings.
            </summary>
            <param name="generator">Custom key generator implementation.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="generator"/> is <b>null</b>.</exception>
            <returns>Fluent configuration builder continuation object.</returns>
        </member>
        <member name="M:Nett.TomlSettings.IPropertyMappingBuilder.UseKeyGenerator(System.Func{Nett.KeyGenerators,Nett.IKeyGenerator})">
            <summary>
            Choose which standard key generator implementation to use for these settings.
            </summary>
            <param name="standardGenerators">Lambda which's parameter allows to choose one of the standard selectors.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="standardGenerators"/> is <b>null</b>.</exception>
            <returns>Fluent configuration builder continuation object.</returns>
        </member>
        <member name="M:Nett.TomlSettings.IPropertyMappingBuilder.OnTargetPropertyNotFound(System.Action{System.String[],System.Object,Nett.TomlObject})">
            <summary>
            Set a custom callback that gets invoked when a target property is not found when a TOML table gets mapped to a
            .Net object.
            </summary>
            <param name="whenNotFound">The callback to invoke.
            Argument 1: The TOML key chain that could not be mapped from highest to deepest. Always contains at least one element.
              The root itself is not part of the key chain.
            Argument 2: The target object on that no property matching they key was found.
            Argument 3: The value associated with that key in the TOML table.
            </param>
            <returns>Fluent configuration builder continuation object.</returns>
        </member>
        <member name="M:Nett.TomlSettings.ITomlSettingsBuilder.ConfigurePropertyMapping(System.Action{Nett.TomlSettings.IPropertyMappingBuilder})">
            <summary>
            Configures the property mapping settings that define how TOML rows are mapped to corresponding CLR object
            properties and vice versa.
            </summary>
            <param name="configureMapping">The configuration lambda.</param>
            <returns>Fluent configuration builder continuation object.</returns>
        </member>
        <member name="T:Nett.TomlObjectFactory.Result`1">
            <summary>
            Result object of a factory operation. Foundation for the fluent API that allows to construct
            complex object Graphs via <see cref="T:Nett.TomlObjectFactory"/> methods.
            </summary>
            <typeparam name="T">The type of TOML object that was created/updated</typeparam>
        </member>
        <member name="P:Nett.TomlObjectFactory.Result`1.And">
            <summary>
            Gets the table owning the added/updated TOML object.
            </summary>
        </member>
        <member name="P:Nett.TomlObjectFactory.Result`1.Owner">
            <summary>
            Gets the table owning the added/updated TOML object.
            </summary>
        </member>
        <member name="P:Nett.TomlObjectFactory.Result`1.Added">
            <summary>
            Gets the object that was added/updated.
            </summary>
        </member>
        <member name="M:Nett.TomlObjectFactory.Result`1.ConfigureAdded(System.Action{`0})">
            <summary>
            Allows further modification of the added/updated object via a user defined <see cref="T:System.Action`1"/>.
            </summary>
            <param name="configure">Action configuration action</param>
            <returns>Gets <b>this</b> - fluent API continuation.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if <paramref name="configure"/> is <b>null</b></exception>
        </member>
        <member name="T:Nett.ITableCombiner">
            <summary>
            Interface representing a built TOML table combine operation.
            </summary>
            <remarks>
            Use <see cref="M:Nett.TomlTable.Combine(System.Func{Nett.ITargetSelector,Nett.ITableCombiner})"/> to create and consume combine operations.
            </remarks>
        </member>
        <member name="T:Nett.ITargetSelector">
            <summary>
            Builder interface to select the target table for a table combine operation.
            </summary>
        </member>
        <member name="M:Nett.ITargetSelector.Overwrite(Nett.TomlTable)">
            <summary>
            Selects the target table of a table combine operation.
            </summary>
            <param name="target">The target table. Will not get modified.</param>
            <returns>A builder object allowing to select the source table for the combine operation.</returns>
            <exception cref="T:System.ArgumentNullException">If target is <b>null</b>.</exception>
        </member>
        <member name="T:Nett.ISourceSelector">
            <summary>
            Builder interface to select the source table for a table combine operation.
            </summary>
        </member>
        <member name="M:Nett.ISourceSelector.With(Nett.TomlTable)">
            <summary>
            Selects the source table for a table combine operation.
            </summary>
            <param name="source">The source table.</param>
            <returns>A builder object allowing to select the comment operation or set the rows for the operation.</returns>
        </member>
        <member name="T:Nett.IRowSelector">
            <summary>
            Builder interface to select the rows the combine operation will process.
            </summary>
        </member>
        <member name="M:Nett.IRowSelector.ForAllSourceRows">
            <summary>
            All rows existing in source will be processed. New rows will be added to the result table. Rows already existing in
            the target table will be replaced.
            </summary>
            <returns>The built combine operation.</returns>
        </member>
        <member name="M:Nett.IRowSelector.ForAllTargetRows">
            <summary>
            All rows in the target table will be overwritten by the equivalent rows from the source table.
            </summary>
            <returns>The built combine operation.</returns>
        </member>
        <member name="M:Nett.IRowSelector.ForRowsOnlyInSource">
            <summary>
            Adds all existing rows from the target table and rows not existing yet in the target table to the resulting table.
            Effectively this is an add new rows operation.
            </summary>
            <returns>The built combine operation.</returns>
        </member>
        <member name="T:Nett.ICommentOperationOrRowSelector">
            <summary>
            Builder interface to select how comments should be handled or what rows should get processed by the combine operation.
            </summary>
        </member>
        <member name="M:Nett.ICommentOperationOrRowSelector.IncludingAllComments(System.Boolean)">
            <summary>
            Replace or append comments in the target table with comments from the source table for rows that are processed.
            </summary>
            <param name="append">If <b>true</b> appends comments instead of replacing the target table comments.</param>
            <returns>A builder object that allows to select the rows to process.</returns>
        </member>
        <member name="M:Nett.ICommentOperationOrRowSelector.IncludingNewComments">
            <summary>
            Copies comments from the source table if the target table row does not have any comments yet.
            </summary>
            <returns>A builder object that allows to select the rows to process.</returns>
        </member>
        <member name="M:Nett.ICommentOperationOrRowSelector.ExcludingComments">
            <summary>
            Keep comments from the target table and do not copy comments from the source table to the resulting table.
            </summary>
            <returns>A builder object that allows to select the rows to process.</returns>
        </member>
        <member name="M:Nett.ICommentOperationOrRowSelector.IncludingComments(System.Func{Nett.InputComments,System.Collections.Generic.IEnumerable{Nett.TomlComment}})">
            <summary>
            Specify custom func to control how comments should be processed.
            </summary>
            <param name="combiner">A func to control how comments should be handled.</param>
            <returns>A builder object that allows to select the rows to process.</returns>
            <exception cref="T:System.ArgumentNullException">If <i>combiner</i> is <b>null</b>.</exception>
        </member>
        <member name="T:Nett.InputComments">
            <summary>
            Struct representing the input data for a custom comment combiner operation.
            </summary>
            <remarks>
            Used as the input argument for a custom comment handler func for
            <see cref="M:Nett.ICommentOperationOrRowSelector.IncludingComments(System.Func{Nett.InputComments,System.Collections.Generic.IEnumerable{Nett.TomlComment}})"/>
            </remarks>
        </member>
        <member name="P:Nett.InputComments.TargetComments">
            <summary>
            Gets the comments of the target table for the row being processed.
            Will be an empty collection for rows that do not exist in the target table.
            </summary>
        </member>
        <member name="P:Nett.InputComments.SourceComments">
            <summary>
            Gets the comment of the source table for the row being processed.
            Will be and empty collection for rows that do not exist in the source table.
            </summary>
        </member>
        <member name="M:Nett.TomlTable.Combine(System.Func{Nett.ITargetSelector,Nett.ITableCombiner})">
             <summary>
             Allows to combine two TOML tables to a new result table.
             </summary>
             <remarks>
             The given lambda is used to configure what combination operation should be performed.
             </remarks>
             <example>
             <code>
             var x = Toml.Create(); // Assume rows are added to X
             var y = Toml.Create(); // Assume rows are added to Y
            
             // Create table that has all rows of X + rows of Y that had no equivalent in row in X
             var r1 = Toml.CombineTables(op => op.Overwrite(X).With(Y).ForRowsOnlyInSource());
            
             // Create table that has all rows of X overwritten with the
             // equivalent rows from Y and added all rows that had no equivalent row in X yet
             var r2 = Toml.CombineTables(op => op.Overwrite(X).With(Y).ForAllSourceRows());
            
             // Create table that has all rows of X overwritten with the
             // equivalent row of Y, if such a row existed in Y
             var r3 = Toml.CombineTables(op => op.Overwrite(X).With(Y).ForAllTargetRows());
            
             // These operations create the following tables
             // Key | X   | Y   | r1 | r2 | r3
             // ------------------------------
             // a   | 1   |     | 1  | 1  | 1
             // b   |     | 2   | 2  | 2  |
             // c   | 3   | 4   | 3  | 4  | 4
             </code>
             </example>
             <param name="operation">Lambda used to configure the operation that should be performed.</param>
             <returns>
             A new TomlTable instance containing the table resulting from the operation. The new table will
             be a completely new deep clone of the original tables/rows.
             </returns>
        </member>
    </members>
</doc>
