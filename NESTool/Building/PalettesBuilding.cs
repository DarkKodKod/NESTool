using ArchitectureLibrary.Model;
using NESTool.FileSystem;
using NESTool.Models;
using NESTool.Utils;
using NESTool.VOs;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Media;

namespace NESTool.Building;

public static class PalettesBuilding
{
    public static void Execute()
    {
        ProjectModel projectModel = ModelManager.Get<ProjectModel>();

        string fullPath = Path.Combine(Path.GetFullPath(projectModel.Build.OutputFilePath), "palettes.s");

        using (StreamWriter outputFile = new(fullPath))
        {
            List<FileModelVO> paletteModelVOs = ProjectFiles.GetModels<PaletteModel>();

            outputFile.WriteLine("; This file is autogenerated!");

            SortedDictionary<string, StringWriter> pals = [];

            foreach (FileModelVO vo in paletteModelVOs)
            {
                PaletteModel? model = vo.Model as PaletteModel;

                string name = "palette_" + vo.Name.Replace(' ', '_').ToLower();

                if (model != null)
                {
                    Color color0 = Util.GetColorFromInt(model.Color0);
                    Color color1 = Util.GetColorFromInt(model.Color1);
                    Color color2 = Util.GetColorFromInt(model.Color2);
                    Color color3 = Util.GetColorFromInt(model.Color3);

                    StringWriter stringWriter = new();

                    stringWriter.Write($"    .byte ");
                    stringWriter.Write($"${Util.ColorToColorHex(color0)},");
                    stringWriter.Write($"${Util.ColorToColorHex(color1)},");
                    stringWriter.Write($"${Util.ColorToColorHex(color2)},");
                    stringWriter.Write($"${Util.ColorToColorHex(color3)}");

                    pals.Add(name, stringWriter);
                }
            }

            foreach (var item in pals)
            {
                outputFile.WriteLine("");
                outputFile.WriteLine($"{item.Key}:");

                outputFile.Write(item.Value.ToString());
                outputFile.Write(Environment.NewLine);
            }
        }
    }
}
