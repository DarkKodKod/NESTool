using ArchitectureLibrary.Model;
using NESTool.Enums;
using NESTool.FileSystem;
using NESTool.Models;
using NESTool.VOs;
using System;
using System.Collections.Generic;
using System.IO;

namespace NESTool.Building
{
    public static class MetaSpritesBuilding
    {
        public static void Execute()
        {
            ProjectModel projectModel = ModelManager.Get<ProjectModel>();

            List<FileModelVO> models = ProjectFiles.GetModels<CharacterModel>();

            foreach (FileModelVO item in models)
            {
                CharacterModel model = item.Model as CharacterModel;

                string fullPath = Path.Combine(Path.GetFullPath(projectModel.Build.OutputFilePath), item.Name + ".s");

                using (StreamWriter outputFile = new StreamWriter(fullPath))
                {
                    WriteMetaSpriteHeader(outputFile);
                    WriteMetaSprites(outputFile, model, item.Name);
                }
            }
        }

        private static void WriteMetaSpriteHeader(StreamWriter outputFile)
        {
            outputFile.WriteLine("; This file is autogenerated!");
            outputFile.WriteLine("");
            outputFile.WriteLine("; PPU OAM");
            outputFile.WriteLine("; http://wiki.nesdev.com/w/index.php/PPU_OAM");
            outputFile.WriteLine("");
            outputFile.WriteLine("; Byte 0 - Y position of top of sprite");
            outputFile.WriteLine("; Byte 1 - Tile index number");
            outputFile.WriteLine("; Byte 2 - Attributes");
            outputFile.WriteLine(";           76543210");
            outputFile.WriteLine(";           ||||||||");
            outputFile.WriteLine(";           ||||||++- Palette (4 to 7) of sprite");
            outputFile.WriteLine(";           |||+++--- Unimplemented");
            outputFile.WriteLine(";           ||+------ Priority (0: in front of background; 1: behind background)");
            outputFile.WriteLine(";           |+------- Flip sprite horizontally");
            outputFile.WriteLine(";           +-------- Flip sprite vertically");
            outputFile.WriteLine("; Byte 3 - X position of left side of sprite.");
            outputFile.WriteLine("");
        }

        private static void WriteMetaSprites(StreamWriter outputFile, CharacterModel model, string name)
        {
            ProjectModel projectModel = ModelManager.Get<ProjectModel>();

            int nesFPS = projectModel.Header.FrameTiming == FrameTiming.NTSC ? (int)TVStandard.NTSC : (int)TVStandard.PAL;

            List<string> animationIndices = new List<string>();

            foreach (CharacterAnimation animation in model.Animations)
            {
                if (string.IsNullOrEmpty(animation.ID))
                {
                    continue;
                }

                int frameIndex = 0;
                List<string> frameNames = new List<string>();

                for (int i = 0; i < animation.Frames.Length; ++i)
                {
                    if (animation.Frames[i].Tiles == null)
                    {
                        continue;
                    }

                    string frameName = $"{name}_{animation.Name}_data_{frameIndex++}";

                    bool foundFrame = false;

                    for (int j = 0; j < animation.Frames[i].Tiles.Length; ++j)
                    {
                        CharacterTile charTile = animation.Frames[i].Tiles[j];

                        if (string.IsNullOrEmpty(charTile.BankID) || string.IsNullOrEmpty(charTile.BankTileID))
                        {
                            continue;
                        }

                        if (foundFrame == false)
                        {
                            frameNames.Add(frameName);

                            outputFile.WriteLine($"{frameName}:");
                            outputFile.WriteLine(";          vert   tile   attr   horiz");

                            foundFrame = true;
                        }

                        byte horiz = (byte)charTile.Point.X;
                        byte vert = (byte)charTile.Point.Y;

                        BankModel bank = ProjectFiles.GetModel<BankModel>(charTile.BankID);
                        byte tile = (byte)bank.GetTileIndex(charTile.BankTileID);

                        int paletteIndex = charTile.PaletteIndex;

                        byte attrs = (byte)paletteIndex;
                        attrs |= charTile.BackBackground ? (byte)32 : (byte)0;
                        attrs |= charTile.FlipX ? (byte)64 : (byte)0;
                        attrs |= charTile.FlipY ? (byte)128 : (byte)0;

                        outputFile.WriteLine($"    .byte   ${vert:X2},   ${tile:X2},   ${attrs:X2},   ${horiz:X2}");
                    }

                    if (foundFrame)
                    {
                        // Add the termination byte
                        outputFile.WriteLine("    .byte   $FF");
                        outputFile.WriteLine("");
                    }
                }

                outputFile.WriteLine($"{name}_{animation.Name}_data:");

                animationIndices.Add($"{animation.Name}");

                int frameDuration = (int)(nesFPS * animation.Speed);

                int colBoxAx = animation.CollisionInfo == null ? 0 : animation.CollisionInfo.OffsetX;
                int colBoxAy = animation.CollisionInfo == null ? 0 : animation.CollisionInfo.OffsetY;
                int colBoxBx = animation.CollisionInfo == null ? 0 : animation.CollisionInfo.OffsetX + animation.CollisionInfo.Width;
                int colBoxCy = animation.CollisionInfo == null ? 0 : animation.CollisionInfo.OffsetY + animation.CollisionInfo.Height;

                outputFile.WriteLine($"    ; number of frames");
                outputFile.WriteLine($"    .byte ${frameNames.Count:X2} ; decimal {frameNames.Count}");
                outputFile.WriteLine($"    ; frame duration");
                outputFile.WriteLine($"    .byte ${frameDuration:X2} ; decimal {frameDuration}");
                outputFile.WriteLine($"    ; collision");
                outputFile.WriteLine($"    ; a____b");
                outputFile.WriteLine($"    ; |    |");
                outputFile.WriteLine($"    ; |____|");
                outputFile.WriteLine($"    ; c    d");
                outputFile.WriteLine($"    ;        a       b     c");
                outputFile.WriteLine($"    ;      x    y    x     y");
                outputFile.Write($"    .byte ");
                outputFile.Write($"${colBoxAx:X2}, ");
                outputFile.Write($"${colBoxAy:X2}, ");
                outputFile.Write($"${colBoxBx:X2}, ");
                outputFile.Write($"${colBoxCy:X2}");
                outputFile.Write(Environment.NewLine);

                foreach (string frameName in frameNames)
                {
                    outputFile.WriteLine($"    .addr {frameName}");
                }

                outputFile.WriteLine("");
            }

            if (animationIndices.Count > 0)
            {
                outputFile.WriteLine("; aninmation indices");

                for (int i = 0; i < animationIndices.Count; ++i)
                {
                    string index = animationIndices[i].ToUpper();
                    string nameUpper = name.ToUpper();

                    outputFile.WriteLine($"ANIM_{nameUpper}_{index} = ${i:X2}");
                }

                outputFile.WriteLine("");

                outputFile.WriteLine($"{name}_anim_num_map:");

                for (int i = 0; i < animationIndices.Count; ++i)
                {
                    string index = animationIndices[i];

                    outputFile.WriteLine($"    .addr {name}_{index}_data");
                }
            }
        }
    }
}
